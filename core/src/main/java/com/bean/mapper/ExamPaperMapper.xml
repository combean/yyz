<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bean.dao.ExamPaperMapper">
  <resultMap id="BaseResultMap" type="com.bean.model.ExamPaper">
    <id column="exam_paper_id" jdbcType="INTEGER" property="examPaperId" />
    <result column="exam_id" jdbcType="INTEGER" property="examId" />
    <result column="paper_id" jdbcType="INTEGER" property="paperId" />
    <result column="paper_name" jdbcType="VARCHAR" property="paperName" />
    <result column="paper_type" jdbcType="INTEGER" property="paperType" />
    <result column="exam_minutes" jdbcType="INTEGER" property="examMinutes" />
    <result column="start_time" jdbcType="TIMESTAMP" property="startTime" />
    <result column="end_time" jdbcType="TIMESTAMP" property="endTime" />
    <result column="subject_name" jdbcType="TIMESTAMP" property="subjectName" />
    <result column="place_name" jdbcType="TIMESTAMP" property="placeName" />
    <result column="place_info" jdbcType="TIMESTAMP" property="placeInfo" />
  </resultMap>
  <sql id="where">
    <where>
      <if test="examPaperId != null">
        AND ep.exam_paper_id = #{examPaperId,jdbcType=INTEGER}
      </if>
      <if test="examId != null">
        AND ep.exam_id = #{examId,jdbcType=INTEGER}
      </if>
      <if test="paperId != null">
        AND ep.paper_id = #{paperId,jdbcType=INTEGER}
      </if>
    </where>
  </sql>
  <insert id="insertList" parameterType="java.util.List">
    insert into exm_exam_paper (exam_id, paper_id
    )
    values
    <foreach collection="list" item="item" index="index" separator=",">
      (#{item.examId,jdbcType=INTEGER}, #{item.paperId,jdbcType=INTEGER})
    </foreach>
  </insert>
  <insert id="insert" parameterType="com.bean.model.ExamPaper">
    insert into exm_exam_paper (exam_id, paper_id
    )
    values
    (#{examId,jdbcType=INTEGER}, #{paperId,jdbcType=INTEGER})
  </insert>
  <delete id="deleteByPaperId" parameterType="java.lang.Integer">
    delete from exm_exam_paper
    where paper_id = #{paperId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExamId" parameterType="java.lang.Integer">
    delete from exm_exam_paper
    WHERE exam_id = #{examId,jdbcType=INTEGER}
  </delete>
  <select id="getListByMap" parameterType="java.util.Map" resultMap="BaseResultMap">
    SELECT
    ep.exam_paper_id, ep.exam_id, ep.paper_id, p.paper_name, p.paper_type, p.exam_minutes, p.start_time, p.end_time,s.subject_name,p1.place_name,p1.place_info
    FROM
    exm_exam_paper  AS ep
    INNER JOIN exm_paper AS p ON ep.paper_id=p.paper_id
    INNER JOIN exm_place AS p1 ON p.place_id=p1.place_id
    INNER JOIN exm_subject AS s ON p.subject_id=s.subject_id
    <include refid="where" />
  </select>
  <select id="getListByExamId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT
    ep.exam_paper_id, ep.exam_id, ep.paper_id, p.paper_name, p.paper_type, p.exam_minutes, p.start_time, p.end_time,s.subject_name,p1.place_name,p1.place_info
    FROM
    exm_exam_paper  AS ep
    INNER JOIN exm_paper AS p ON ep.paper_id=p.paper_id
    INNER JOIN exm_place AS p1 ON p.place_id=p1.place_id
    INNER JOIN exm_subject AS s ON p.subject_id=s.subject_id
    WHERE exam_id = #{examId,jdbcType=INTEGER}
  </select>
  <delete id="deleteById" parameterType="java.lang.Integer">
    delete from exm_exam_paper
    where exam_paper_id = #{examPaperId,jdbcType=INTEGER}
  </delete>
  <select id="getCountByMap" parameterType="java.util.Map" resultType="int">
    SELECT COUNT(*)
    FROM exm_exam_paper AS ep
    <include refid="where" />
  </select>

  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    exam_paper_id, exam_id, paper_id
  </sql>
  <select id="selectByExample" parameterType="com.bean.model.ExamPaperExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from exm_exam_paper
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from exm_exam_paper
    where exam_paper_id = #{examPaperId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from exm_exam_paper
    where exam_paper_id = #{examPaperId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.bean.model.ExamPaperExample">
    delete from exm_exam_paper
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="com.bean.model.ExamPaper">
    insert into exm_exam_paper
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="examPaperId != null">
        exam_paper_id,
      </if>
      <if test="examId != null">
        exam_id,
      </if>
      <if test="paperId != null">
        paper_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="examPaperId != null">
        #{examPaperId,jdbcType=INTEGER},
      </if>
      <if test="examId != null">
        #{examId,jdbcType=INTEGER},
      </if>
      <if test="paperId != null">
        #{paperId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.bean.model.ExamPaperExample" resultType="java.lang.Long">
    select count(*) from exm_exam_paper
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update exm_exam_paper
    <set>
      <if test="record.examPaperId != null">
        exam_paper_id = #{record.examPaperId,jdbcType=INTEGER},
      </if>
      <if test="record.examId != null">
        exam_id = #{record.examId,jdbcType=INTEGER},
      </if>
      <if test="record.paperId != null">
        paper_id = #{record.paperId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update exm_exam_paper
    set exam_paper_id = #{record.examPaperId,jdbcType=INTEGER},
      exam_id = #{record.examId,jdbcType=INTEGER},
      paper_id = #{record.paperId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.bean.model.ExamPaper">
    update exm_exam_paper
    <set>
      <if test="examId != null">
        exam_id = #{examId,jdbcType=INTEGER},
      </if>
      <if test="paperId != null">
        paper_id = #{paperId,jdbcType=INTEGER},
      </if>
    </set>
    where exam_paper_id = #{examPaperId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bean.model.ExamPaper">
    update exm_exam_paper
    set exam_id = #{examId,jdbcType=INTEGER},
      paper_id = #{paperId,jdbcType=INTEGER}
    where exam_paper_id = #{examPaperId,jdbcType=INTEGER}
  </update>
</mapper>